// Code generated by cmd/cgo; DO NOT EDIT.

//line /Users/cengqi/workspace/go19/src/os/signal/internal/pty/pty.go:1:1
// Copyright 2017 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

//go:build (aix || darwin || dragonfly || freebsd || (linux && !android) || netbsd || openbsd) && cgo

// Package pty is a simple pseudo-terminal package for Unix systems,
// implemented by calling C functions via cgo.
// This is only used for testing the os/signal package.
package pty

/*
#define _XOPEN_SOURCE 600
#include <fcntl.h>
#include <stdlib.h>
#include <unistd.h>
*/
import _ "unsafe"

import (
	"fmt"
	"os"
	"syscall"
)

type PtyError struct {
	FuncName    string
	ErrorString string
	Errno       syscall.Errno
}

func ptyError(name string, err error) *PtyError {
	return &PtyError{name, err.Error(), err.(syscall.Errno)}
}

func (e *PtyError) Error() string {
	return fmt.Sprintf("%s: %s", e.FuncName, e.ErrorString)
}

func (e *PtyError) Unwrap() error { return e.Errno }

// Open returns a control pty and the name of the linked process tty.
func Open() (pty *os.File, processTTY string, err error) {
	m, err := ( /*line :44:12*/_C2func_posix_openpt /*line :44:25*/)(( /*line :44:27*/_Ciconst_O_RDWR /*line :44:34*/))
	if err != nil {
		return nil, "", ptyError("posix_openpt", err)
	}
	if _, err := ( /*line :48:15*/_C2func_grantpt /*line :48:23*/)(m); err != nil {
		( /*line :49:3*/_Cfunc_close /*line :49:9*/)(m)
		return nil, "", ptyError("grantpt", err)
	}
	if _, err := ( /*line :52:15*/_C2func_unlockpt /*line :52:24*/)(m); err != nil {
		( /*line :53:3*/_Cfunc_close /*line :53:9*/)(m)
		return nil, "", ptyError("unlockpt", err)
	}
	processTTY = ( /*line :56:15*/_Cfunc_GoString /*line :56:24*/)(( /*line :56:26*/_Cfunc_ptsname /*line :56:34*/)(m))
	return os.NewFile(uintptr(m), "pty"), processTTY, nil
}
