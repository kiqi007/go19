//go:cgo_ldflag "-g"
//go:cgo_ldflag "-O2"
// Code generated by cmd/cgo; DO NOT EDIT.

package main

import "unsafe"

import _ "runtime/cgo"

import "syscall"

var _ syscall.Errno
func _Cgo_ptr(ptr unsafe.Pointer) unsafe.Pointer { return ptr }

//go:linkname _Cgo_always_false runtime.cgoAlwaysFalse
var _Cgo_always_false bool
//go:linkname _Cgo_use runtime.cgoUse
func _Cgo_use(interface{})
type _Ctype_FILE = _Ctype_struct___sFILE

type _Ctype___darwin_off_t = _Ctype___int64_t

type _Ctype___int64_t = _Ctype_longlong

type _Ctype_bar_t = _Ctype_struct_bar

type _Ctype_char int8

type _Ctype_complexdouble complex128

type _Ctype_complexfloat complex64

type _Ctype_foo_t = _Ctype_struct_foo

type _Ctype_fpos_t = _Ctype___darwin_off_t

type _Ctype_int int32

type _Ctype_longlong int64

type _Ctype_schar int8

type _Ctype_short int16

type _Ctype_size_t = _Ctype_ulong

type _Ctype_struct___sFILE struct {
	_p		*_Ctype_uchar
	_r		_Ctype_int
	_w		_Ctype_int
	_flags		_Ctype_short
	_file		_Ctype_short
	_bf		_Ctype_struct___sbuf
	_lbfsize	_Ctype_int
	_cookie		unsafe.Pointer
	_close		*[0]byte
	_read		*[0]byte
	_seek		*[0]byte
	_write		*[0]byte
	_ub		_Ctype_struct___sbuf
	_extra		*_Ctype_struct___sFILEX
	_ur		_Ctype_int
	_ubuf		[3]_Ctype_uchar
	_nbuf		[1]_Ctype_uchar
	_lb		_Ctype_struct___sbuf
	_blksize	_Ctype_int
	_offset		_Ctype_fpos_t
}

//go:notinheap
type _Ctype_struct___sFILEX struct{}

type _Ctype_struct___sbuf struct {
	_base	*_Ctype_uchar
	_size	_Ctype_int
	_	[4]byte
}

//go:notinheap
type _Ctype_struct_bar struct{}

//go:notinheap
type _Ctype_struct_foo struct{}

type _Ctype_uchar uint8

type _Ctype_uint uint32

type _Ctype_ulong uint64

type _Ctype_ulonglong uint64

type _Ctype_ushort uint16

type _Ctype_v = _Ctype_void

//go:notinheap
type _Ctype_void_notinheap struct{}

type _Ctype_void [0]byte

//go:linkname _cgo_runtime_cgocall runtime.cgocall
func _cgo_runtime_cgocall(unsafe.Pointer, uintptr) int32

//go:linkname _cgoCheckPointer runtime.cgoCheckPointer
func _cgoCheckPointer(interface{}, interface{})

//go:linkname _cgoCheckResult runtime.cgoCheckResult
func _cgoCheckResult(interface{})
//go:linkname __cgo_foop foop
//go:cgo_import_static foop
var __cgo_foop byte
var _Cvar_foop **_Ctype_struct_foo = (**_Ctype_struct_foo)(unsafe.Pointer(&__cgo_foop))
//go:linkname __cgo_fi fi
//go:cgo_import_static fi
var __cgo_fi byte
var _Cfpvar_fp_fi unsafe.Pointer = (unsafe.Pointer)(unsafe.Pointer(&__cgo_fi))
//go:linkname __cgo_i i
//go:cgo_import_static i
var __cgo_i byte
var _Cvar_i *_Ctype_int = (*_Ctype_int)(unsafe.Pointer(&__cgo_i))

//go:cgo_import_static _cgo_3ca078d39abe_Cfunc_F
//go:linkname __cgofn__cgo_3ca078d39abe_Cfunc_F _cgo_3ca078d39abe_Cfunc_F
var __cgofn__cgo_3ca078d39abe_Cfunc_F byte
var _cgo_3ca078d39abe_Cfunc_F = unsafe.Pointer(&__cgofn__cgo_3ca078d39abe_Cfunc_F)

//go:cgo_unsafe_args
func _Cfunc_F(p0 *unsafe.Pointer) (r1 _Ctype_void) {
	_cgo_runtime_cgocall(_cgo_3ca078d39abe_Cfunc_F, uintptr(unsafe.Pointer(&p0)))
	if _Cgo_always_false {
		_Cgo_use(p0)
	}
	return
}

func _Cfunc__CMalloc(n _Ctype_size_t) unsafe.Pointer {
	return _cgo_cmalloc(uint64(n))
}
//go:cgo_import_static _cgo_3ca078d39abe_Cfunc_fi
//go:linkname __cgofn__cgo_3ca078d39abe_Cfunc_fi _cgo_3ca078d39abe_Cfunc_fi
var __cgofn__cgo_3ca078d39abe_Cfunc_fi byte
var _cgo_3ca078d39abe_Cfunc_fi = unsafe.Pointer(&__cgofn__cgo_3ca078d39abe_Cfunc_fi)

//go:cgo_unsafe_args
func _Cfunc_fi(p0 _Ctype_int) (r1 _Ctype_void) {
	_cgo_runtime_cgocall(_cgo_3ca078d39abe_Cfunc_fi, uintptr(unsafe.Pointer(&p0)))
	if _Cgo_always_false {
		_Cgo_use(p0)
	}
	return
}
//go:cgo_import_static _cgo_3ca078d39abe_Cfunc_fopen
//go:linkname __cgofn__cgo_3ca078d39abe_Cfunc_fopen _cgo_3ca078d39abe_Cfunc_fopen
var __cgofn__cgo_3ca078d39abe_Cfunc_fopen byte
var _cgo_3ca078d39abe_Cfunc_fopen = unsafe.Pointer(&__cgofn__cgo_3ca078d39abe_Cfunc_fopen)

//go:cgo_unsafe_args
func _Cfunc_fopen(p0 *_Ctype_char, p1 *_Ctype_char) (r1 *_Ctype_struct___sFILE) {
	_cgo_runtime_cgocall(_cgo_3ca078d39abe_Cfunc_fopen, uintptr(unsafe.Pointer(&p0)))
	if _Cgo_always_false {
		_Cgo_use(p0)
		_Cgo_use(p1)
	}
	return
}
//go:cgo_import_static _cgo_3ca078d39abe_Cfunc_fppi
//go:linkname __cgofn__cgo_3ca078d39abe_Cfunc_fppi _cgo_3ca078d39abe_Cfunc_fppi
var __cgofn__cgo_3ca078d39abe_Cfunc_fppi byte
var _cgo_3ca078d39abe_Cfunc_fppi = unsafe.Pointer(&__cgofn__cgo_3ca078d39abe_Cfunc_fppi)

//go:cgo_unsafe_args
func _Cfunc_fppi(p0 **_Ctype_int) (r1 _Ctype_void) {
	_cgo_runtime_cgocall(_cgo_3ca078d39abe_Cfunc_fppi, uintptr(unsafe.Pointer(&p0)))
	if _Cgo_always_false {
		_Cgo_use(p0)
	}
	return
}
//go:cgo_import_static _cgo_3ca078d39abe_Cfunc_fvi
//go:linkname __cgofn__cgo_3ca078d39abe_Cfunc_fvi _cgo_3ca078d39abe_Cfunc_fvi
var __cgofn__cgo_3ca078d39abe_Cfunc_fvi byte
var _cgo_3ca078d39abe_Cfunc_fvi = unsafe.Pointer(&__cgofn__cgo_3ca078d39abe_Cfunc_fvi)

//go:cgo_unsafe_args
func _Cfunc_fvi(p0 unsafe.Pointer, p1 _Ctype_int) (r1 _Ctype_void) {
	_cgo_runtime_cgocall(_cgo_3ca078d39abe_Cfunc_fvi, uintptr(unsafe.Pointer(&p0)))
	if _Cgo_always_false {
		_Cgo_use(p0)
		_Cgo_use(p1)
	}
	return
}
//go:cgo_import_static _cgo_3ca078d39abe_Cfunc_transform
//go:linkname __cgofn__cgo_3ca078d39abe_Cfunc_transform _cgo_3ca078d39abe_Cfunc_transform
var __cgofn__cgo_3ca078d39abe_Cfunc_transform byte
var _cgo_3ca078d39abe_Cfunc_transform = unsafe.Pointer(&__cgofn__cgo_3ca078d39abe_Cfunc_transform)

//go:cgo_unsafe_args
func _Cfunc_transform(p0 _Ctype_int) (r1 _Ctype_int) {
	_cgo_runtime_cgocall(_cgo_3ca078d39abe_Cfunc_transform, uintptr(unsafe.Pointer(&p0)))
	if _Cgo_always_false {
		_Cgo_use(p0)
	}
	return
}

//go:cgo_import_static _cgo_3ca078d39abe_Cfunc__Cmalloc
//go:linkname __cgofn__cgo_3ca078d39abe_Cfunc__Cmalloc _cgo_3ca078d39abe_Cfunc__Cmalloc
var __cgofn__cgo_3ca078d39abe_Cfunc__Cmalloc byte
var _cgo_3ca078d39abe_Cfunc__Cmalloc = unsafe.Pointer(&__cgofn__cgo_3ca078d39abe_Cfunc__Cmalloc)

//go:linkname runtime_throw runtime.throw
func runtime_throw(string)

//go:cgo_unsafe_args
func _cgo_cmalloc(p0 uint64) (r1 unsafe.Pointer) {
	_cgo_runtime_cgocall(_cgo_3ca078d39abe_Cfunc__Cmalloc, uintptr(unsafe.Pointer(&p0)))
	if r1 == nil {
		runtime_throw("runtime: C malloc failed")
	}
	return
}
