// Code generated by cmd/cgo; DO NOT EDIT.

//line /Users/cengqi/workspace/go19/misc/cgo/test/issue21897.go:1:1
// Copyright 2017 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

//go:build darwin && cgo && !internal
// +build darwin,cgo,!internal

package cgotest

/*
#cgo LDFLAGS: -framework CoreFoundation
#include <CoreFoundation/CoreFoundation.h>
*/
import _ "unsafe"
import (
	"runtime/debug"
	"testing"
	"unsafe"
)

func test21897(t *testing.T) {
	// Please write barrier, kick in soon.
	defer debug.SetGCPercent(debug.SetGCPercent(1))

	for i := 0; i < 10000; i++ {
		testCFNumberRef()
		testCFDateRef()
		testCFBooleanRef()
		// Allocate some memory, so eventually the write barrier is enabled
		// and it will see writes of bad pointers in the test* functions below.
		byteSliceSink = make([]byte, 1024)
	}
}

var byteSliceSink []byte

func testCFNumberRef() {
	var v int64 = 0
	xCFNumberRef = func() _Ctype_CFNumberRef{ var _cgo0 _Ctype_CFAllocatorRef = /*line :39:34*/*_Cvar_kCFAllocatorSystemDefault /*line :39:61*/; var _cgo1 _Ctype_CFNumberType = /*line :39:63*/_Ciconst_kCFNumberSInt64Type /*line :39:84*/; _cgoBase2 := /*line :39:101*/&v; _cgo2 := /*line :39:86*/unsafe.Pointer(_cgoBase2); _cgoCheckPointer(_cgoBase2, 0 == 0); return /*line :39:105*/_Cfunc_CFNumberCreate(_cgo0, _cgo1, _cgo2); }()
	//fmt.Printf("CFNumberRef: %x\n", uintptr(unsafe.Pointer(xCFNumberRef)))
}

var xCFNumberRef  /*line :43:18*/_Ctype_CFNumberRef /*line :43:31*/

func testCFDateRef() {
	xCFDateRef = func() _Ctype_CFDateRef{ var _cgo0 _Ctype_CFAllocatorRef = /*line :46:30*/*_Cvar_kCFAllocatorSystemDefault /*line :46:57*/; var _cgo1 _Ctype_CFAbsoluteTime = /*line :46:59*/0; return /*line :46:61*/_Cfunc_CFDateCreate(_cgo0, _cgo1); }() // 0 value is 1 Jan 2001 00:00:00 GMT
	//fmt.Printf("CFDateRef: %x\n", uintptr(unsafe.Pointer(xCFDateRef)))
}

var xCFDateRef  /*line :50:16*/_Ctype_CFDateRef /*line :50:27*/

func testCFBooleanRef() {
	xCFBooleanRef = ( /*line :53:18*/*_Cvar_kCFBooleanFalse /*line :53:34*/)
	//fmt.Printf("CFBooleanRef: %x\n", uintptr(unsafe.Pointer(xCFBooleanRef)))
}

var xCFBooleanRef  /*line :57:19*/_Ctype_CFBooleanRef /*line :57:33*/
